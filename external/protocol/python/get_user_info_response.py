# -*- coding: utf-8 -*-
"""
The file auto generated by tool genapi, Do not modify.
"""

import json
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from role_detail import *

class GetUserInfoResponse:
	"""
	获取用户信息
	"""
	def __init__(self) -> None:
		self._desc = ""  # desc
		self._desc_u = 0  # desc设置标识
		self._username = ""  # desc
		self._username_u = 0  # desc设置标识
		self._roles = []  # 角色列表
		self._roles_u = 0  # 角色列表设置标识
		pass


	# desc
	def set_desc(self, desc):
		self._desc = desc
		self._desc_u = 1


	@property
	def is_set_desc(self):
		return self._desc_u != 0


	@property
	def desc(self):
		return self._desc


	# desc
	def set_username(self, username):
		self._username = username
		self._username_u = 1


	@property
	def is_set_username(self):
		return self._username_u != 0


	@property
	def username(self):
		return self._username


	# 角色列表
	def set_roles(self, roles):
		self._roles = roles
		self._roles_u = 1


	@property
	def is_set_roles(self):
		return self._roles_u != 0


	@property
	def roles(self):
		return self._roles


	def to_dict(self) -> dict:
		"""
		Convert object to dict and return
		"""
		data_dict = {}
		data_dict["desc"] = self._desc  # desc
		data_dict["username"] = self._username  # desc
		data_dict["roles"] = []
		for node in self._roles:
			data_dict["roles"].append( node.to_dict() )  # 角色列表

		return data_dict


	def to_obj(self, data_dict: dict):
		"""
		Convert dict to object
		"""

		# check params
		if len( data_dict.get("desc") ) < 1:
			raise Exception("param:desc error, out of range min:1!")
		if len( data_dict.get("desc") ) > 32:
			raise Exception("param:desc error, out of range max:32!")
		if len( data_dict.get("username") ) < 1:
			raise Exception("param:username error, out of range min:1!")
		if len( data_dict.get("username") ) > 32:
			raise Exception("param:username error, out of range max:32!")

		# parse params
		self.set_desc( data_dict.get("desc") )  # desc
		self.set_username( data_dict.get("username") )  # desc
		for node in data_dict.get("roles"):
			obj = RoleDetail()
			obj.to_obj(node)
			self._roles.append(obj)  # 角色列表
			self._roles_u = 1


	def to_json(self):
		"""
		Convert object to object
		"""
		return json.dumps( self.to_dict() )