# -*- coding: utf-8 -*-
"""
The file auto generated by tool genapi, Do not modify.
"""

import json
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class AddRoleRequest:
	"""
	添加角色
	"""
	def __init__(self) -> None:
		self._role_code = ""  # 角色代码
		self._role_code_u = 0  # 角色代码设置标识
		self._role_name = ""  # 角色名称
		self._role_name_u = 0  # 角色名称设置标识
		self._is_admin = 0  # 是否是管理员
		self._is_admin_u = 0  # 是否是管理员设置标识
		pass


	# 角色代码
	def set_role_code(self, role_code):
		self._role_code = role_code
		self._role_code_u = 1


	@property
	def is_set_role_code(self):
		return self._role_code_u != 0


	@property
	def role_code(self):
		return self._role_code


	# 角色名称
	def set_role_name(self, role_name):
		self._role_name = role_name
		self._role_name_u = 1


	@property
	def is_set_role_name(self):
		return self._role_name_u != 0


	@property
	def role_name(self):
		return self._role_name


	# 是否是管理员
	def set_is_admin(self, is_admin):
		self._is_admin = is_admin
		self._is_admin_u = 1


	@property
	def is_set_is_admin(self):
		return self._is_admin_u != 0


	@property
	def is_admin(self):
		return self._is_admin


	def to_dict(self) -> dict:
		"""
		Convert object to dict and return
		"""
		data_dict = {}
		data_dict["role_code"] = self._role_code  # 角色代码
		data_dict["role_name"] = self._role_name  # 角色名称
		data_dict["is_admin"] = self._is_admin  # 是否是管理员

		return data_dict


	def to_obj(self, data_dict: dict):
		"""
		Convert dict to object
		"""

		# check params
		if len( data_dict.get("role_code") ) < 1:
			raise Exception("param:role_code error, out of range min:1!")
		if len( data_dict.get("role_code") ) > 64:
			raise Exception("param:role_code error, out of range max:64!")
		if len( data_dict.get("role_name") ) < 1:
			raise Exception("param:role_name error, out of range min:1!")
		if len( data_dict.get("role_name") ) > 64:
			raise Exception("param:role_name error, out of range max:64!")
		if data_dict.get("is_admin") < 0:
			raise Exception("param:is_admin error, out of range min:0!")
		if data_dict.get("is_admin") > 1:
			raise Exception("param:is_admin error, out of range max:1!")

		# parse params
		self.set_role_code( data_dict.get("role_code") )  # 角色代码
		self.set_role_name( data_dict.get("role_name") )  # 角色名称
		self.set_is_admin( data_dict.get("is_admin") )  # 是否是管理员


	def to_json(self):
		"""
		Convert object to object
		"""
		return json.dumps( self.to_dict() )